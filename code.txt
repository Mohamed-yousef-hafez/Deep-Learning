
#heart disease prediction

import numpy as np
import pandas as pd
from sklearn.metrices import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from keras.models import Sequential
from keras.layers import Dense,Relu

import tensorflow as tf
from statistics import mode
tf.logging.set_verbosity(tf.logging.ERROR) 
pd.options.mode.chained_assignment=None
np.rand0m.seed(10)


myData = pd.read_csv("heart.csv")
myData.columns =['age','sex','chest_pain_type','resting_bloode_pressure','cholesterol','fasting_bloode_sugar',
'rest_ecg','max_heart_rate_achived','excercise_induced_angina','st_depression','st_slope','num_major_vessels','thalasemia','target']

myData['sex']myData['sex']==0]='female'
myData['sex']myData['sex']==1]='male'
myData['chest_pain_type']myData['chest_pain_type'] ==1] ='typical angina'
myData['chest_pain_type']myData['chest_pain_type'] ==2] ='atypical angina'
myData['chest_pain_type']myData['chest_pain_type'] ==3] ='non anginal pain'
myData['chest_pain_type']myData['chest_pain_type']==4] ='asymptomatic'
myData['fasting_bloode_sugar']myData['fasting_bloode_sugar']==0] ='lower than 120mg/ml'
myData['fasting_bloode_sugar']myData['fasting_bloode_sugar']==1] ='greater than 120mg/ml'
myData['rest_ecg']myData['rest_ecg']==0] ='normal'
myData['rest_ecg']myData['rest_ecg']==1] ='st-T wave abnormality'
myData['rest_ecg']myData['rest_ecg']==2] ='left ventricular hypertrophy'
myData['excercise_induced_angina']myData['excercise_induced_angina']==0] ='no'
myData['excercise_induced_angina']myData['excercise_induced_angina']==1] ='yes'
myData['st_slope']myData['st_slope']==1] ='upsloping'
myData['st_slope']myData['st_slope']==2] ='flat'
myData['st_slope']myData['st_slope']==3] ='downsloping'
myData['thalasemia']myData['thalasemia']==1] ='normal'
myData['thalasemia']myData['thalasemia']==2] ='fixed defect'
myData['thalasemia']myData['thalasemia']==3] ='reversible defect'

#spliting

myData =pd.get_dumies(myData.drop_first=True)
myData = (myData- np.min(myData)/np.max(myData)- np.min(myData))
x_train,x_test,y_train,y_test =train_test_split(myData.drop('target',axis=1),myData['target'],test_size=.2,random_state=0)

#algorithms

lin_model = LogisticRegression(solver='lbfgs')
lin_model.fit(x_train,y_train)
print("Linear Model Accuracy: ",lin_model.score(x_test,y_test))



knn_model = KNeighborClassifier()
knn_model.fit(x_train,y_train)
print("K Nearest Neighbor Model Accuracy: ",knn_model.score(x_test,y_test))



svm_model = SVC(gamma='auto')
svm_model.fit(x_train,y_train)
print("Support Vector Machine Model Accuracy: ",svm_model.score(x_test,y_test))




nb_model = GaussianNB()
nb_model.fit(x_train,y_train)
print("Naive Bayes Model Accuracy: ",nb_model.score(x_test,y_test))




tree_model = DecisionTreeClassifier()
tree_model.fit(x_train,y_train)
print("Decision Tree Model Accuracy: ",tree_model.score(x_test,y_test))




forest_model = RandomForestClassifier(n_estimator='100')
forest_model.fit(x_train,y_train)
print("Random Forest Model Accuracy: ",forest_model.score(x_test,y_test))


#hidden layers

nn_model = Sequential()
nn_model.add(Dense(100,input_shape(19,)))
nn_model.add(Relu())
nn_model.add(Dense(100))
nn_model.add(Relu())
nn_model.add(Dense(10))
nn_model.add(Relu())
nn_model.add(Dense(1,activation=sigmoid))

nn_model.compile(optimizr='Adam', loss='categorical_hinge', metrics=['accuracy'])
nn_model.fit(x_train,y_train, epochs=15, verbose=0)

#prediction test
y_predicted = (nn_model.predict(x_test)>0.5)
conf_mat = confusion_matrix(y_test,y_predicted)
print(conf_mat)

#output

total= sum(sum(conf_mat))
sensitivity = conf_mat[0,0]/(conf_mat[0,0]+conf_mat[1,0])
specificity = conf_mat[1,1]/(conf_mat[1,1]+conf_mat[0,1])
accuracy = (conf_mat[0,0]+(conf_mat[1,1])/total

print('sensitivity: ',sensitivity)
print('specificity:',specificity)
print('accuracy:',accuracy)











 